# Windifi Frontend Project Structure

## Overview

This is a Next.js 15.4.4 frontend application for Windifi, a DeFi swap platform. The project uses TypeScript, Chakra UI, React Query, Zustand, and follows a feature-based architecture.

## Key Technologies

- **Framework**: Next.js 15.4.4 with App Router
- **Language**: TypeScript with strict mode
- **UI Library**: Chakra UI v3
- **State Management**: Zustand for client state, React Query for server state
- **Styling**: Tailwind CSS v4
- **Testing**: Vitest with React Testing Library
- **Form Handling**: React Hook Form with Zod validation

## Project Structure

### Core Application Files

- [src/app/layout.tsx](mdc:src/app/layout.tsx) - Root layout with providers and metadata
- [src/app/page.tsx](mdc:src/app/page.tsx) - Main application page
- [src/app/globals.css](mdc:src/app/globals.css) - Global styles

### Providers

- [src/providers/root-provider.tsx](mdc:src/providers/root-provider.tsx) - Main provider wrapper
- [src/providers/query-provider.tsx](mdc:src/providers/query-provider.tsx) - React Query provider
- [src/providers/theme-provider.tsx](mdc:src/providers/theme-provider.tsx) - Theme provider

### Features (Feature-Based Architecture)

Each feature is self-contained with its own components, store, and types:

- `src/features/connect-wallet/` - Wallet connection functionality
  - Components: UI components for wallet connection
  - Store: Zustand store for wallet state management

### Shared Resources

- `src/shared/components/` - Reusable UI components
- `src/shared/hooks/` - Custom React hooks
- `src/shared/types/` - Common TypeScript types
- `src/shared/utils/` - Utility functions
- `src/shared/constants/` - Application constants

### Configuration Files

- [package.json](mdc:package.json) - Dependencies and scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [eslint.config.mjs](mdc:eslint.config.mjs) - ESLint configuration
- [next.config.ts](mdc:next.config.ts) - Next.js configuration

## Development Guidelines

1. Use feature-based architecture for new features
2. Follow TypeScript strict mode guidelines
3. Use Chakra UI components for consistent UI
4. Implement proper error boundaries and loading states
5. Write tests for critical functionality
6. Use conventional commits with commitizen
   description:
   globs:
   alwaysApply: false

---
