# Feature Development Guidelines

## Feature-Based Architecture

Each feature should be self-contained and follow this structure:

```
src/features/[feature-name]/
├── components/          # UI components specific to this feature
├── store/              # Zustand store for feature state
├── hooks/              # Custom hooks for feature logic
├── types/              # TypeScript types for the feature
├── utils/              # Utility functions for the feature
└── index.ts            # Public API exports
```

## Component Structure

Follow this pattern for feature components:

```typescript
// Component with proper TypeScript interfaces
interface ComponentProps {
  // Define all props with proper types
}

export function ComponentName({ prop1, prop2 }: ComponentProps) {
  // Component logic
  return (
    // JSX with Chakra UI components
  );
}
```

## State Management Pattern

Use Zustand for feature state following this pattern:

```typescript
interface FeatureState {
  // State properties
}

interface FeatureActions {
  // Action methods
}

export const useFeatureStore = create<FeatureState & FeatureActions>((set) => ({
  // Initial state
  // Actions that update state
}));
```

## API Integration

- Use React Query for API calls
- Implement proper loading and error states
- Use optimistic updates when appropriate
- Handle edge cases and network errors

## Testing Strategy

- Write unit tests for utility functions
- Test component behavior with React Testing Library
- Mock external dependencies
- Test error scenarios and edge cases

## Example Feature Implementation

Reference the connect-wallet feature as a template:

- [src/features/connect-wallet/components/ConnectWalletButton.tsx](mdc:src/features/connect-wallet/components/ConnectWalletButton.tsx)
- [src/features/connect-wallet/store/connect-wallet-store.ts](mdc:src/features/connect-wallet/store/connect-wallet-store.ts)

## Integration Points

- Use shared components from `src/shared/components/`
- Leverage common hooks from `src/shared/hooks/`
- Use utility functions from `src/shared/utils/`
- Follow type definitions in `src/shared/types/`
  description:
  globs:
  alwaysApply: false

---
